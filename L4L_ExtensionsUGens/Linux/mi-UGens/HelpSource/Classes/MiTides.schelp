TITLE:: MiTides
summary:: a quad LFO
categories:: UGens>Env
related:: Classes/MiPlaits, Classes/MiRings

DESCRIPTION::
MiTides is a unique looping AD envelope generator and LFO.

note::
MiTides is based on mutable instruments' Tides eurorack module - link::https://mutable-instruments.net/modules/tides::. Original code by Émilie Gillet.::

Please refer to the original Tides manual for indepth information: link::https://mutable-instruments.net/modules/tides/manual/::

CLASSMETHODS::

METHOD:: ar

ARGUMENT:: freq
In looping mode, frequency in Hz, else attack / release time.


ARGUMENT:: shape
Waveform shape (0. -- 1.)

ARGUMENT:: slope
Waveform slope, from falling ramp |\ to rising ramp /| (0. -- 1.)

ARGUMENT:: smooth
Smoothness of the waveform. From 0.5 to 0.0 a lowpass filter is applied, from 0.5 to 1.0 a wavefolder adds kinks and bumps along the slope (0. -- 1.)

ARGUMENT:: shift
Shift/Level, controls the shift in amplitude/time/frequency (0. -- 1.)

ARGUMENT:: trig
Trigger input. In AD mode, a trigger will reset the envelope to 0.0 and initiate an attack/decay cycle. No matter how short the trigger is, the attack/decay cycle will always complete.
In cyclic mode, a trigger will reset the oscillator so that it starts a new ascending phase.
In AR mode, the rising edge of the gate will cause the envelope to raise to +0.5 from its current value, and the falling edge of the gate will cause the envelope to fall to 0.0 from its current value – the same way an ADSR envelope with a null decay time and a 100% sustain level would behave.

ARGUMENT:: clock
Clock input for tempo or frequency-locked operation. When this input is patched, the ratio argument controls the ratio between the frequency of the signal sent to this input, and the frequency of the signals generated by MiTides.

ARGUMENT:: output_mode
Chooses the output mode. 0: GATES, 1: AMPLITUDES, 2: PHASES, 3: FREQUENCIES.

ARGUMENT:: ramp_mode
Chooses the ramp mode. 0: AD, 1: LOOPING, 2: AR

ARGUMENT:: ratio
Set the ratio to the incomping clock frequency.
0: 0.0625, 16,
1: 0.125, 8,
2: 0.1666666, 6,
3: 0.25, 4,
4: 0.3333333, 3,
5: 0.5, 2,
6: 0.6666666, 3,
7: 0.75, 4,
8: 0.8, 5,
9: 1, 1,
10: 1.25, 4,
11: 1.3333333, 3,
12: 1.5, 2,
13: 2.0, 1,
14: 3.0, 1,
15: 4.0, 1,
16: 6.0, 1,
17: 8.0, 1,
18: 16.0, 1

ARGUMENT:: rate
Chooses between 0: CONTROL and 1: AUDIO rate operation. 'Control' is normally meant for low frequency envs and LFOs, while 'Audio' uses some ani-alias-filtering for audio rate frequencies - but it's up to you to choose...

returns:: 4 output ramps


EXAMPLES::

code::

// mode: FREQUENCIES
{MiTides.ar(10, 0.2, 0.7, output_mode: 3)}.plot(1)

// mode: PHASES
{MiTides.ar(3, 0.2, output_mode: 2)}.plot(1)


(   // shape
{
	var shape = LFTri.ar(0.11).range(0,1);
	var out = MiTides.ar(100, shape, output_mode: 2, mul: 0.5);
	out[0]!2;
}.play
)


(   // slope
{
	var slope = LFTri.ar(0.11).range(0,1);
	var out = MiTides.ar(100, 0.5, slope, output_mode: 2, mul: 0.5);
	out[0]!2;
}.play
)


(   // phasing
{
	var shape = 0.2;
	var slope = 0.0;
	var shift = LFNoise1.ar(0.3).range(0,1);  // slightly shift phases
	var smooth = LFNoise1.kr(0.02).range(0.1, 0.9);
	var out = MiTides.ar(70, shape, slope, smooth, shift, output_mode: 2);
	Splay.ar(out);  // 4 channel output mixed to stereo
}.play
)


(   // nice chords + tremolo
{
	var shape = LFTri.ar(0.11).range(0,1);
	var slope = LFTri.ar(0.2).range(0,1);
	var chord = LFNoise1.ar(0.1).range(0.5,1);
	var smooth = SinOsc.ar(LFNoise1.kr(0.2).range(0.1,10)).range(0,0.5);
	var out = MiTides.ar(200, shape, slope, smooth, chord, output_mode: 3, mul: 0.5);
	Splay.ar(out);  // 4 channel output mixed to stereo
}.play
)



(   // amplitude mode
{
	var freq = 0.15;
	var shape = 0.2;
	var slope = 0.2;
	var level = LFTri.ar(0.1).range(0,1);
	var env = MiTides.ar(freq, shape, slope, 0.3, level, output_mode: 1, ramp_mode: 1);
	var sines = SinOsc.ar([200,300,500,900]);
	var out = sines * env;
	Splay.ar(out);  // 4 channel output mixed to stereo
}.play
)

(   // amplitude + trigger input
{
	var freq = LFNoise1.ar(0.8).range(0.2,10);
	var shape = 0.2;
	var slope = 0.2;
	var level = LFNoise1.ar(0.3).range(0,1);
	var trig = LFPulse.ar(2);
	var env = MiTides.ar(freq, shape, slope, 0.3, level, trig: trig, output_mode: 1, ramp_mode: 0);
	var sines = SinOsc.ar([200,300,500,700]);
	var out = sines * env;
	Splay.ar(out);  // 4 channel output mixed to stereo
}.play
)


(   // phasing envs
{
	var freq = 10; //LFNoise1.ar(0.8).range(0.2,10);
	var shape = 0.2;
	var slope = 0.5;
	var shift = LFTri.ar(0.1).range(0,1); //LFNoise1.ar(0.3).range(0,1);
	var trig = LFPulse.ar(5);
	var env = MiTides.ar(freq, shape, slope, 0.5, shift, trig: trig, output_mode: 2, ramp_mode: 0);
	var sines = SinOsc.ar([200,300,500,700]);
	var out = sines * env;
	Splay.ar(out);  // 4 channel output mixed to stereo
}.play
)


(   // gate
{
	var freq = 5;  // attack rate;
	var shape = LFTri.ar(0.13).range(0,1);
	var slope = 0.5;
	var smooth = LFTri.ar(0.1).range(0,1);
	var trig = LFPulse.ar(1);
	var env = MiTides.ar(freq, shape, slope, smooth, 0.8, trig: trig, output_mode: 0, ramp_mode: 0);
	var sine = PMOsc.ar(150, 300, 2);
	var out = sine * env[0];
	out!2
}.play
)


(   // Lightbath -- Loom 4 -- inspired...
{
	var mix, out, del;

	var bpm = 140;
	var period = (60 / bpm) * 6;
	var speed = 1.0 / period;
	var del_times = period / [6, 8];

	var trig = Impulse.kr(speed);
	var clock = Phasor.kr(trig);

	// oscs:
	var pit = TChoose.kr(trig, [67, 60, 65]);
	var shape = LFTri.kr(0.11).range(0,1);
	var slope = LFTri.kr(0.11).range(0.5,0.8);
	var smooth = LFNoise1.kr(0.07).range(0.25,0.7);
	var chord = LFNoise1.kr(0.03).range(0.0,0.5);

	var oscs = MiTides.ar(pit.midicps, shape, slope, smooth, chord);


	// envelopes:
	var envs = MiTides.ar(speed, 0.35, 0, 0.46, 0.92, clock: clock, ratio: 9, rate: 0);
	var scaler = LFNoise1.kr( [0.1, 0.07, 0.11, 0.05] );

	// mix:
	mix = oscs * envs * scaler;

	out = Splay.ar(mix, center: LFTri.kr(0.1));
	del = CombL.ar(out, 2, del_times, 6, mul: 0.5);
	out + del
}.play
)



::